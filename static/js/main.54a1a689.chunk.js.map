{"version":3,"sources":["components/Jumbotron.js","components/GameCard.js","containers/Game.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","react_default","a","createElement","className","style","backgroundImage","currentScore","topScore","message","children","GameCardContainer","simpsonsList","map","simpson","key","id","GameCard_GameCard","img","image","handleCardClick","GameCard","onClick","src","alt","Game","state","data","guessedCorrectly","updatedsimpsonsList","_this","clicked","handleCorrectGuess","handleIncorrectGuess","shufflesimpsons","sort","Math","random","_this$state","newScore","newTopScore","setState","resetsimpsonList","src_components_Jumbotron","this","GameCard_GameCardContainer","Component","App","containers_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54a1a689.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Jumbotron.css';\r\n\r\nconst Jumbotron = (props) => {\r\n  return (\r\n    <div className=\"jumbotron\" style={{backgroundImage: \"url(https://kokyun.files.wordpress.com/2010/02/118631-wholesimpsons.jpg?w=595)\"}}>\r\n      <h1 className =\"display-4\">Simpsons Characters Clicky Game!</h1> \r\n      <h1 className = \"display-5\">Click on Each Picture, but don't click twice on the same one, or you start over!</h1>\r\n      <h3>Current Score: {props.currentScore}</h3>\r\n      <h3>Top Score: {props.topScore}</h3>\r\n      <h3>{props.message}</h3>\r\n      {props.children}\r\n      \r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\n\r\nexport const GameCardContainer = (props) => {\r\n  return (\r\n    <div className=\"row align-items-stretch\">\r\n      {props.simpsonsList.map(simpson => {\r\n        return (\r\n          <div key={simpson.id} className=\"col-2 col-md-1>\">\r\n            <GameCard \r\n            img={simpson.image}\r\n            handleCardClick={props.handleCardClick}\r\n            id={simpson.id}\r\n            />\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst GameCard = (props) => {\r\n  return (\r\n    <div className=\"card\" onClick={() => props.handleCardClick(props.id)}>\r\n      <img src={props.img} alt={props.img} className=\"card-img\"/>\r\n    </div>\r\n  )\r\n}\r\n","import React, {Component} from 'react';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport {GameCardContainer} from '../components/GameCard';\r\n\r\nimport data from '../data.json';\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    simpsonsList: data,\r\n    currentScore: 0,\r\n    topScore: 0,\r\n    message: \"\"\r\n    \r\n\r\n  };\r\n  \r\n  //create method to handle card click\r\n  handleCardClick = (id) => {\r\n    let guessedCorrectly = false;\r\n\r\n    //find simpson we clicked on and check if we clicked on it already, if not set clicked property to true\r\n    const updatedsimpsonsList = this.state.simpsonsList.map(simpson => {\r\n      //check Simpson we clicked on by matching id\r\n      if (simpson.id === id) {\r\n        if (!simpson.clicked){\r\n          simpson.clicked = true;\r\n          guessedCorrectly = true;\r\n        }\r\n      }\r\n      return simpson;\r\n    });\r\n    //check to see if guessedcorrectly is set to true if true, we shuffle cards and keep playing, if false game over because you clicked someone a second time\r\n    (guessedCorrectly) ?\r\n      this.handleCorrectGuess(updatedsimpsonsList) :\r\n      this.handleIncorrectGuess(updatedsimpsonsList) \r\n    \r\n  }\r\n// shuffle stuff at random\r\n  shufflesimpsons = (simpsonsList) => simpsonsList.sort(() => .5 - Math.random());\r\n  \r\n\r\n  handleCorrectGuess = (simpsonsList) => {\r\n    //destructure score and topscore from state so we can update it\r\n    const {currentScore, topScore, message} = this.state\r\n\r\n    //update score\r\n    const newScore = currentScore + 1;\r\n    //if newScore is greater tan the current topscore, newscore is the new topscorp\r\n    const newTopScore = (newScore > topScore) ? newScore : topScore;\r\n\r\n    this.setState({\r\n      simpsonsList: this.shufflesimpsons(simpsonsList),\r\n      currentScore: newScore,\r\n      topScore: newTopScore\r\n    });\r\n    if (newScore > 0) {\r\n      this.setState({\r\n        message:\"\"\r\n      });\r\n    }\r\n    \r\n    if (newScore > 17) {\r\n\r\n      const resetsimpsonList = simpsonsList.map(simpson => {\r\n        simpson.clicked = false;\r\n        return simpson;\r\n      });\r\n      //update state to show score is now 0 and shuffle simpsons\r\n  \r\n      this.setState({\r\n        simpsonsList: this.shufflesimpsons(resetsimpsonList),\r\n        currentScore: 0,\r\n        message: \"Congratulations! You Win! Click and image to play again\"\r\n      });\r\n    };\r\n    \r\n  }\r\n\r\n  // handle incorrect guess\r\n  handleIncorrectGuess = (simpsonsList) => {\r\n\r\n    //reset simpsons list\r\n    const resetsimpsonList = simpsonsList.map(simpson => {\r\n      simpson.clicked = false;\r\n      return simpson;\r\n    });\r\n    //update state to show score is now 0 and shuffle simposns\r\n\r\n    this.setState({\r\n      simpsonsList: this.shufflesimpsons(resetsimpsonList),\r\n      currentScore: 0,\r\n      message: \"I'm Sorry, better luck next time. Click an image to start again\"\r\n    });\r\n    \r\n  }\r\n\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n    \r\n    <Jumbotron\r\n      currentScore={this.state.currentScore}\r\n      topScore={this.state.topScore}\r\n      message={this.state.message}\r\n    >\r\n    </Jumbotron>\r\n    <div className=\"container\">\r\n      <GameCardContainer simpsonsList={this.state.simpsonsList}\r\n      handleCardClick={this.handleCardClick}/>\r\n    </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from \"./containers/Game\";\n\nconst App = () => <Game/>\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}